package me.jessyan.peach.shop.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import me.jessyan.peach.shop.entity.search.SearchRecordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_RECORD_BEAN".
*/
public class SearchRecordBeanDao extends AbstractDao<SearchRecordBean, Long> {

    public static final String TABLENAME = "SEARCH_RECORD_BEAN";

    /**
     * Properties of entity SearchRecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Millis = new Property(1, Long.class, "millis", false, "millis");
        public final static Property Value = new Property(2, String.class, "value", false, "value");
        public final static Property Type = new Property(3, Integer.class, "type", false, "type");
        public final static Property SearchId = new Property(4, Long.class, "searchId", false, "SEARCH_ID");
    }

    private Query<SearchRecordBean> userSearchRecordBean_SearchListQuery;

    public SearchRecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SearchRecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_RECORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"millis\" INTEGER," + // 1: millis
                "\"value\" TEXT," + // 2: value
                "\"type\" INTEGER," + // 3: type
                "\"SEARCH_ID\" INTEGER);"); // 4: searchId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_RECORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long millis = entity.getMillis();
        if (millis != null) {
            stmt.bindLong(2, millis);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(3, value);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }
 
        Long searchId = entity.getSearchId();
        if (searchId != null) {
            stmt.bindLong(5, searchId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long millis = entity.getMillis();
        if (millis != null) {
            stmt.bindLong(2, millis);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(3, value);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }
 
        Long searchId = entity.getSearchId();
        if (searchId != null) {
            stmt.bindLong(5, searchId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SearchRecordBean readEntity(Cursor cursor, int offset) {
        SearchRecordBean entity = new SearchRecordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // millis
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // value
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // searchId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchRecordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMillis(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSearchId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SearchRecordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SearchRecordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SearchRecordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "searchList" to-many relationship of UserSearchRecordBean. */
    public List<SearchRecordBean> _queryUserSearchRecordBean_SearchList(Long searchId) {
        synchronized (this) {
            if (userSearchRecordBean_SearchListQuery == null) {
                QueryBuilder<SearchRecordBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SearchId.eq(null));
                userSearchRecordBean_SearchListQuery = queryBuilder.build();
            }
        }
        Query<SearchRecordBean> query = userSearchRecordBean_SearchListQuery.forCurrentThread();
        query.setParameter(0, searchId);
        return query.list();
    }

}
